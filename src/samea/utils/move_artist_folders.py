import os
import sys
import shutil
import re
import json
import argparse
import pyperclip
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Tuple, Set
import send2trash
from opencc import OpenCC
import webbrowser
import tempfile
import time

# Ê∑ªÂä†Áà∂ÁõÆÂΩïÂà∞PythonË∑ØÂæÑ
script_dir = os.path.dirname(os.path.abspath(__file__))
parent_dir = os.path.dirname(os.path.dirname(script_dir))
sys.path.append(parent_dir)

from nodes.record.logger_config import setup_logger
from nodes.tui.textual_logger import TextualLoggerManager
from nodes.tui.preset.textual_preset import create_config_app
from nodes.error.error_handler import handle_file_operation

# ÂÆö‰πâÊó•ÂøóÂ∏ÉÂ±ÄÈÖçÁΩÆ
TEXTUAL_LAYOUT = {
    "current_stats": {
        "ratio": 2,
        "title": "üìä ÊÄª‰ΩìÁªüËÆ°",
        "style": "lightyellow"
    },
    "current_progress": {
        "ratio": 2,
        "title": "üîÑ ÁßªÂä®ËøõÂ∫¶",
        "style": "lightcyan"
    },
    "artist_info": {
        "ratio": 3,
        "title": "üé® ÁîªÂ∏à‰ø°ÊÅØ",
        "style": "lightmagenta"
    },
    "conflict_log": {
        "ratio": 2,
        "title": "‚ö†Ô∏è ÂÜ≤Á™ÅËÆ∞ÂΩï",
        "style": "pink"
    },
    "process_log": {
        "ratio": 3,
        "title": "üìù Â§ÑÁêÜÊó•Âøó",
        "style": "lightblue"
    }
}

# ËÆæÁΩÆÊó•ÂøóÈÖçÁΩÆ
config = {
    'script_name': 'move_artist_folders',
    'console_enabled': False  # Á¶ÅÁî®ÊéßÂà∂Âè∞ËæìÂá∫Ôºå‰ΩøÁî®TextualLogger‰ª£Êõø
}

# ÂàùÂßãÂåñÊó•ÂøóÁ≥ªÁªü
logger, config_info = setup_logger(config)

def init_TextualLogger():
    """ÂàùÂßãÂåñTextualLogger"""
    TextualLoggerManager.set_layout(TEXTUAL_LAYOUT, config_info['log_file'])
    logger.info("[#update]‚úÖ Êó•ÂøóÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê")
    
# ÂàùÂßãÂåñ OpenCC
cc_s2t = OpenCC('s2t')  # ÁÆÄ‰ΩìÂà∞ÁπÅ‰Ωì
cc_t2s = OpenCC('t2s')  # ÁπÅ‰ΩìÂà∞ÁÆÄ‰Ωì

# ÁîªÂ∏àÂêçÁß∞ÂåπÈÖçÊ®°Âºè
ARTIST_PATTERN = re.compile(r'\[(.*?)(?:\s*\((.*?)\))?\]')

def normalize_artist_name(name: str) -> str:
    """
    Ê†áÂáÜÂåñÁîªÂ∏àÂêçÁß∞ÔºåÂ§ÑÁêÜÁÆÄÁπÅ‰ΩìÂ∑ÆÂºÇÂíåÊ†ºÂºèÂ∑ÆÂºÇ
    """
    # ÂéªÈô§Á©∫Ê†ºÂíåËΩ¨Êç¢‰∏∫Â∞èÂÜô
    name = name.lower().strip()
    
    # ËΩ¨‰∏∫ÁÆÄ‰Ωì
    simplified = cc_t2s.convert(name)
    
    # ÁßªÈô§Â∏∏ËßÅ‰∏çÂΩ±ÂìçÁîªÂ∏àËØÜÂà´ÁöÑÂ≠óÁ¨¶
    simplified = re.sub(r'[_\-.,;:!?\s]', '', simplified)
    
    return simplified

def extract_artist_info(folder_name: str) -> Tuple[str, str]:
    """
    ‰ªéÊñá‰ª∂Â§πÂêçÁß∞‰∏≠ÊèêÂèñÁîªÂ∏à‰ø°ÊÅØ
    ËøîÂõûÊ†ºÂºè: (Á§æÂõ¢Âêç, ÁîªÂ∏àÂêç)
    """
    match = ARTIST_PATTERN.search(folder_name)
    if match:
        full_match = match.group(0)
        if '(' in full_match:
            # Ê†ºÂºè‰∏∫ [Á§æÂõ¢ (ÁîªÂ∏à)]
            group = match.group(1).strip()
            artist = match.group(2).strip() if match.group(2) else ""
            return group, artist
        else:
            # Ê†ºÂºè‰∏∫ [ÁîªÂ∏à]
            return "", match.group(1).strip()
    
    # Êú™ËÉΩÂåπÈÖçÂà∞ÁîªÂ∏àÊ†ºÂºèÔºåËøîÂõûÁ©∫
    return "", ""

def is_artist_folder(folder_name: str) -> bool:
    """
    Âà§Êñ≠Êñá‰ª∂Â§πÊòØÂê¶ÊòØÁîªÂ∏àÊñá‰ª∂Â§π
    """
    # Ê£ÄÊü•ÊòØÂê¶ÂåπÈÖçÁîªÂ∏àÊ®°Âºè
    match = ARTIST_PATTERN.search(folder_name)
    if not match:
        return False
    
    # ÊéíÈô§ÁâπÂÆöÁ±ªÂûãÁöÑÊñá‰ª∂Â§π
    blacklist = [
        '00', 'temp', 'trash', 'backup', 'wait', 
        'ÂΩíÊ°£', 'Êú™ÂàÜÁ±ª', 'ÊöÇÂ≠ò', 'ÂæÖÂ§ÑÁêÜ', 'ÂÖ∂‰ªñ'
    ]
    
    for keyword in blacklist:
        if keyword.lower() in folder_name.lower():
            return False
    
    return True

def are_artists_same(name1: str, name2: str) -> bool:
    """
    ÊØîËæÉ‰∏§‰∏™ÁîªÂ∏àÂêçÁß∞ÊòØÂê¶ÊåáÂêëÂêå‰∏ÄÁîªÂ∏à
    """
    # ÊèêÂèñÁîªÂ∏à‰ø°ÊÅØ
    group1, artist1 = extract_artist_info(name1)
    group2, artist2 = extract_artist_info(name2)
    
    # Â¶ÇÊûúÁîªÂ∏àÂêç‰∏∫Á©∫ÔºåÂàô‰∏çÂåπÈÖç
    if not artist1 or not artist2:
        return False
    
    # Ê†áÂáÜÂåñÂêçÁß∞ËøõË°åÊØîËæÉ
    norm_artist1 = normalize_artist_name(artist1)
    norm_artist2 = normalize_artist_name(artist2)
    
    # Â¶ÇÊûúÁîªÂ∏àÂêçÁõ∏ÂêåÔºåÂàôËÆ§‰∏∫ÊòØÂêå‰∏ÄÁîªÂ∏à
    if norm_artist1 and norm_artist2 and norm_artist1 == norm_artist2:
        return True
    
    # Á§æÂõ¢ÂíåÁîªÂ∏àÈÉΩÁõ∏ÂêåÁöÑÊÉÖÂÜµ
    if group1 and group2:
        norm_group1 = normalize_artist_name(group1)
        norm_group2 = normalize_artist_name(group2)
        if norm_group1 == norm_group2 and norm_artist1 == norm_artist2:
            return True
    
    return False

def create_wait_folder(target_dir: str) -> str:
    """
    Âú®ÁõÆÊ†áÁõÆÂΩïÂàõÂª∫ÊàñÁ°Æ‰øùÂ≠òÂú®[02wait]Êñá‰ª∂Â§π
    """
    wait_folder = os.path.join(target_dir, "[02wait]")
    try:
        os.makedirs(wait_folder, exist_ok=True)
        logger.info(f"[#process_log]Á°Æ‰øùÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§πÂ≠òÂú®: {wait_folder}")
    except Exception as e:
        logger.info(f"[#process_log]ÂàõÂª∫ÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§πÂ§±Ë¥•: {e}")
    
    return wait_folder

def get_conflict_folders(source_dir: str, target_dir: str) -> Dict[str, List[str]]:
    """
    Êü•ÊâæÊ∫êÁõÆÂΩïÂíåÁõÆÊ†áÁõÆÂΩï‰∏≠ÂêåÂêçÊàñÊåáÂêëÂêå‰∏ÄÁîªÂ∏àÁöÑÊñá‰ª∂Â§π
    ËøîÂõû: {Ê∫êÊñá‰ª∂Â§πÂêç: [ÂØπÂ∫îÁõÆÊ†áÊñá‰ª∂Â§πÂàóË°®]}
    """
    conflicts = {}
    
    # Ëé∑ÂèñÁõÆÊ†áÁõÆÂΩïÁöÑÊâÄÊúâ‰∏ÄÁ∫ßÊñá‰ª∂Â§π
    target_folders = [f for f in os.listdir(target_dir) 
                     if os.path.isdir(os.path.join(target_dir, f))]
    
    # ËøáÊª§Êéâ‰∏çÊòØÁîªÂ∏àÊñá‰ª∂Â§πÁöÑÁâπÊÆäÊñá‰ª∂Â§π
    target_artist_folders = [f for f in target_folders if is_artist_folder(f)]
    
    # Ëé∑ÂèñÊ∫êÁõÆÂΩïÁöÑÊâÄÊúâ‰∏ÄÁ∫ßÊñá‰ª∂Â§π
    for src_folder in os.listdir(source_dir):
        src_path = os.path.join(source_dir, src_folder)
        
        # Âè™Â§ÑÁêÜÊñá‰ª∂Â§π‰∏îÁ¨¶ÂêàÁîªÂ∏àÊñá‰ª∂Â§πÂëΩÂêçËßÑËåÉ
        if not os.path.isdir(src_path) or not is_artist_folder(src_folder):
            continue
        
        # Êü•ÊâæÂÜ≤Á™Å
        conflicting_targets = []
        
        # 1. È¶ñÂÖàÊ£ÄÊü•ÂÆåÂÖ®Áõ∏ÂêåÁöÑÊñá‰ª∂Â§πÂêç
        if src_folder in target_folders:
            conflicting_targets.append(src_folder)
            continue  # Â¶ÇÊûúÂêçÁß∞ÂÆåÂÖ®Áõ∏ÂêåÔºå‰∏çÈúÄË¶ÅÂÜçËøõË°åÁîªÂ∏àÂêçÊØîËæÉ
        
        # 2. Ê£ÄÊü•ÊåáÂêëÂêå‰∏ÄÁîªÂ∏àÁöÑ‰∏çÂêåÊ†ºÂºèÊñá‰ª∂Â§πÂêç
        for target_folder in target_artist_folders:
            if are_artists_same(src_folder, target_folder):
                conflicting_targets.append(target_folder)
        
        # Â¶ÇÊûúÊúâÂÜ≤Á™ÅÔºåËÆ∞ÂΩï
        if conflicting_targets:
            conflicts[src_folder] = conflicting_targets
    
    return conflicts

@handle_file_operation(skip_errors=True)
def move_folder(src_path: str, dst_path: str) -> bool:
    """
    ÂÆâÂÖ®ÁßªÂä®Êñá‰ª∂Â§π
    """
    try:
        # Â¶ÇÊûúÁõÆÊ†áË∑ØÂæÑÂ∑≤Â≠òÂú®ÔºåÂÖàÂ∞ùËØïÂÆâÂÖ®Âà†Èô§
        if os.path.exists(dst_path):
            logger.info(f"[#conflict_log]ÁõÆÊ†áË∑ØÂæÑÂ∑≤Â≠òÂú®ÔºåÂ∞ùËØïÁßªÂä®Âà∞ÂõûÊî∂Á´ô: {dst_path}")
            send2trash.send2trash(dst_path)
        
        # ÁßªÂä®Êñá‰ª∂Â§π
        shutil.move(src_path, dst_path)
        return True
    except Exception as e:
        logger.info(f"[#process_log]ÁßªÂä®Êñá‰ª∂Â§πÂ§±Ë¥•: {src_path} -> {dst_path}")
        logger.info(f"[#process_log]ÈîôËØØ‰ø°ÊÅØ: {str(e)}")
        return False

def generate_html_confirmation(source_dir: str, target_dir: str, source_folders: List[str], conflict_map: Dict[str, List[str]]) -> str:
    """
    ÁîüÊàêHTMLÁ°ÆËÆ§È°µÈù¢
    """
    # ÂàõÂª∫‰∏¥Êó∂HTMLÊñá‰ª∂
    temp_file = tempfile.NamedTemporaryFile(delete=False, suffix='.html', mode='w', encoding='utf-8')
    
    # HTMLÂÜÖÂÆπ
    html_content = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <title>ÁîªÂ∏àÊñá‰ª∂Â§πÁßªÂä®Á°ÆËÆ§</title>
        <style>
            body {{
                font-family: Arial, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }}
            h1, h2, h3 {{
                color: #333;
            }}
            .section {{
                background-color: white;
                padding: 15px;
                margin-bottom: 20px;
                border-radius: 5px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }}
            .folders-list {{
                max-height: 300px;
                overflow-y: auto;
                border: 1px solid #ddd;
                padding: 10px;
                margin: 10px 0;
                background-color: #fafafa;
            }}
            .folder-item {{
                padding: 5px;
                border-bottom: 1px solid #eee;
            }}
            .folder-item:last-child {{
                border-bottom: none;
            }}
            .conflict {{
                color: #d9534f;
                font-weight: bold;
            }}
            .conflict-details {{
                margin-left: 20px;
                color: #777;
                font-style: italic;
            }}
            .button-container {{
                text-align: center;
                margin-top: 30px;
            }}
            .confirm-button {{
                background-color: #5cb85c;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 16px;
                cursor: pointer;
                border-radius: 5px;
                margin-right: 10px;
            }}
            .cancel-button {{
                background-color: #d9534f;
                color: white;
                border: none;
                padding: 10px 20px;
                font-size: 16px;
                cursor: pointer;
                border-radius: 5px;
            }}
            .summary {{
                font-weight: bold;
                margin-bottom: 10px;
            }}
        </style>
    </head>
    <body>
        <h1>ÁîªÂ∏àÊñá‰ª∂Â§πÁßªÂä®Á°ÆËÆ§</h1>
        
        <div class="section">
            <h2>ÁßªÂä®Ê¶ÇË¶Å</h2>
            <p><strong>Ê∫êÁõÆÂΩï:</strong> {source_dir}</p>
            <p><strong>ÁõÆÊ†áÁõÆÂΩï:</strong> {target_dir}</p>
            <div class="summary">
                <p>ÊÄªËÆ°ÁîªÂ∏àÊñá‰ª∂Â§π: {len(source_folders)} ‰∏™</p>
                <p>Â≠òÂú®ÂÜ≤Á™ÅÊñá‰ª∂Â§π: {len(conflict_map)} ‰∏™</p>
            </div>
        </div>
        
        <div class="section">
            <h2>ÂæÖÁßªÂä®Êñá‰ª∂Â§πÂàóË°®</h2>
            <div class="folders-list">
    """
    
    # Ê∑ªÂä†Êñá‰ª∂Â§πÂàóË°®
    for folder in source_folders:
        group, artist = extract_artist_info(folder)
        artist_info = f"Á§æÂõ¢: {group}, ÁîªÂ∏à: {artist}" if group else f"ÁîªÂ∏à: {artist}"
        
        if folder in conflict_map:
            html_content += f"""
                <div class="folder-item conflict">
                    {folder} ({artist_info}) - Â≠òÂú®ÂÜ≤Á™Å!
                    <div class="conflict-details">
                        ÂÜ≤Á™ÅÊñá‰ª∂Â§π: {', '.join(conflict_map[folder])}
                    </div>
                </div>
            """
        else:
            html_content += f"""
                <div class="folder-item">
                    {folder} ({artist_info})
                </div>
            """
    
    # Ê∑ªÂä†Á°ÆËÆ§ÊåâÈíÆÂíåËØ¥Êòé
    html_content += """
            </div>
        </div>
        
        <div class="section">
            <h2>Êìç‰ΩúËØ¥Êòé</h2>
            <p>ÁÇπÂáª"Á°ÆËÆ§ÁßªÂä®"ÊåâÈíÆÂ∞ÜÊâßË°å‰ª•‰∏ãÊìç‰Ωú:</p>
            <ul>
                <li>ÂØπ‰∫éÂ≠òÂú®ÂÜ≤Á™ÅÁöÑÊñá‰ª∂Â§πÔºå‰ºöÂÖàÂ∞ÜÁõÆÊ†áÁõÆÂΩï‰∏≠ÁöÑÂêåÂêçÊñá‰ª∂Â§πÁßªÂä®Âà∞[02wait]Êñá‰ª∂Â§π</li>
                <li>ÁÑ∂ÂêéÂ∞ÜÊ∫êÁõÆÂΩï‰∏≠ÁöÑÊâÄÊúâÁîªÂ∏àÊñá‰ª∂Â§πÁßªÂä®Âà∞ÁõÆÊ†áÁõÆÂΩï</li>
            </ul>
            <p>Â¶ÇÊûúÊÇ®‰∏çÊÉ≥ÁªßÁª≠ÔºåËØ∑ÁÇπÂáª"ÂèñÊ∂à"ÊåâÈíÆ„ÄÇ</p>
        </div>
        
        <div class="button-container">
            <button class="confirm-button" onclick="confirmMove()">Á°ÆËÆ§ÁßªÂä®</button>
            <button class="cancel-button" onclick="cancelMove()">ÂèñÊ∂à</button>
        </div>
        
        <script>
            function confirmMove() {
                // ÂàõÂª∫‰∏Ä‰∏™Ê†áËÆ∞Êñá‰ª∂Ë°®Á§∫Áî®Êà∑Á°ÆËÆ§
                fetch('confirm.html', {method: 'POST'})
                    .then(() => {
                        document.body.innerHTML = '<h1>Â∑≤Á°ÆËÆ§ÔºåÊ≠£Âú®ÊâßË°åÁßªÂä®Êìç‰Ωú...</h1><p>ËØ∑ÂÖ≥Èó≠Ê≠§È°µÈù¢Âπ∂ËøîÂõûÁ®ãÂ∫è„ÄÇ</p>';
                    })
                    .catch(err => {
                        console.error(err);
                        // Â¶ÇÊûúfetchÂ§±Ë¥•Ôºå‰πüÂàõÂª∫‰∏Ä‰∏™Á°ÆËÆ§Êñá‰ª∂
                        const link = document.createElement('a');
                        link.href = 'data:text/plain;charset=utf-8,confirmed';
                        link.download = 'confirm.txt';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        document.body.innerHTML = '<h1>Â∑≤Á°ÆËÆ§ÔºåÊ≠£Âú®ÊâßË°åÁßªÂä®Êìç‰Ωú...</h1><p>ËØ∑ÂÖ≥Èó≠Ê≠§È°µÈù¢Âπ∂ËøîÂõûÁ®ãÂ∫è„ÄÇ</p>';
                    });
            }
            
            function cancelMove() {
                // ÂàõÂª∫‰∏Ä‰∏™Ê†áËÆ∞Êñá‰ª∂Ë°®Á§∫Áî®Êà∑ÂèñÊ∂à
                fetch('cancel.html', {method: 'POST'})
                    .then(() => {
                        document.body.innerHTML = '<h1>Â∑≤ÂèñÊ∂àÊìç‰Ωú</h1><p>ËØ∑ÂÖ≥Èó≠Ê≠§È°µÈù¢Âπ∂ËøîÂõûÁ®ãÂ∫è„ÄÇ</p>';
                    })
                    .catch(err => {
                        console.error(err);
                        // Â¶ÇÊûúfetchÂ§±Ë¥•Ôºå‰πüÂàõÂª∫‰∏Ä‰∏™ÂèñÊ∂àÊñá‰ª∂
                        const link = document.createElement('a');
                        link.href = 'data:text/plain;charset=utf-8,canceled';
                        link.download = 'cancel.txt';
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        document.body.innerHTML = '<h1>Â∑≤ÂèñÊ∂àÊìç‰Ωú</h1><p>ËØ∑ÂÖ≥Èó≠Ê≠§È°µÈù¢Âπ∂ËøîÂõûÁ®ãÂ∫è„ÄÇ</p>';
                    });
            }
        </script>
    </body>
    </html>
    """
    
    # ÂÜôÂÖ•HTMLÊñá‰ª∂
    temp_file.write(html_content)
    temp_file.close()
    
    return temp_file.name

def wait_for_confirmation(html_file_path: str) -> bool:
    """
    ÊâìÂºÄHTMLÁ°ÆËÆ§È°µÈù¢Âπ∂Á≠âÂæÖÁî®Êà∑Á°ÆËÆ§
    ËøîÂõûÁî®Êà∑ÊòØÂê¶Á°ÆËÆ§
    """
    # ÊâìÂºÄHTMLÊñá‰ª∂
    webbrowser.open('file://' + html_file_path)
    
    # ÂàõÂª∫Á°ÆËÆ§ÂíåÂèñÊ∂àÁöÑÊñá‰ª∂Ë∑ØÂæÑ
    confirm_file = os.path.join(os.path.dirname(html_file_path), 'confirm.txt')
    cancel_file = os.path.join(os.path.dirname(html_file_path), 'cancel.txt')
    
    # Âà†Èô§ÂèØËÉΩÂ≠òÂú®ÁöÑÊóßÊñá‰ª∂
    for file in [confirm_file, cancel_file]:
        if os.path.exists(file):
            os.remove(file)
    
    logger.info(f"[#process_log]Â∑≤ÊâìÂºÄÁ°ÆËÆ§È°µÈù¢ÔºåÁ≠âÂæÖÁî®Êà∑Á°ÆËÆ§...")
    
    # Á≠âÂæÖÁî®Êà∑Êìç‰Ωú
    while True:
        if os.path.exists(confirm_file):
            logger.info(f"[#process_log]Áî®Êà∑Â∑≤Á°ÆËÆ§Êìç‰Ωú")
            os.remove(confirm_file)
            os.remove(html_file_path)
            return True
        
        if os.path.exists(cancel_file):
            logger.info(f"[#process_log]Áî®Êà∑Â∑≤ÂèñÊ∂àÊìç‰Ωú")
            os.remove(cancel_file)
            os.remove(html_file_path)
            return False
        
        time.sleep(0.5)  # ÊöÇÂÅú‰∏Ä‰∏ãÔºåÂáèÂ∞ëCPU‰ΩøÁî®

def process_directory_pair(source_dir: str, target_dir: str, dry_run: bool = False) -> Dict:
    """
    Â§ÑÁêÜ‰∏ÄÂØπÁõÆÂΩïÔºåÁßªÂä®Ê∫êÁõÆÂΩï‰∏≠ÁöÑÁîªÂ∏àÊñá‰ª∂Â§πÂà∞ÁõÆÊ†áÁõÆÂΩï
    ÈÅáÂà∞ÂÜ≤Á™ÅÊó∂Â∞ÜÁõÆÊ†áÁõÆÂΩï‰∏≠ÁöÑÊñá‰ª∂Â§πÁßªËá≥[02wait]
    """
    results = {
        "total_folders": 0,
        "moved_folders": 0,
        "conflicts": 0,
        "moved_conflicts": 0,
        "errors": 0
    }
    
    logger.info(f"[#current_stats]ÂºÄÂßãÂ§ÑÁêÜÁõÆÂΩïÂØπ: {source_dir} -> {target_dir}")
    
    # Á°Æ‰øùÊ∫êÁõÆÂΩïÂíåÁõÆÊ†áÁõÆÂΩïÈÉΩÂ≠òÂú®
    if not os.path.exists(source_dir):
        logger.info(f"[#process_log]Ê∫êÁõÆÂΩï‰∏çÂ≠òÂú®: {source_dir}")
        return results
    
    if not os.path.exists(target_dir):
        logger.info(f"[#process_log]ÁõÆÊ†áÁõÆÂΩï‰∏çÂ≠òÂú®: {target_dir}")
        return results
    
    # ÂàõÂª∫ÂæÖÂ§ÑÁêÜÊñá‰ª∂Â§π
    wait_folder = create_wait_folder(target_dir)
    
    # Êü•ÊâæÊΩúÂú®ÂÜ≤Á™Å
    conflict_map = get_conflict_folders(source_dir, target_dir)
    
    # Ëé∑ÂèñÈúÄË¶ÅÂ§ÑÁêÜÁöÑÊ∫êÊñá‰ª∂Â§π
    source_folders = [f for f in os.listdir(source_dir) 
                     if os.path.isdir(os.path.join(source_dir, f)) and is_artist_folder(f)]
    
    results["total_folders"] = len(source_folders)
    results["conflicts"] = len(conflict_map)
    logger.info(f"[#current_stats]ÂæÖÂ§ÑÁêÜÁîªÂ∏àÊñá‰ª∂Â§π: {len(source_folders)}")
    logger.info(f"[#current_stats]ÂÜ≤Á™ÅÊñá‰ª∂Â§π: {len(conflict_map)}")
    
    # ÊòæÁ§∫ÂÜ≤Á™Å‰ø°ÊÅØ
    if conflict_map:
        logger.info(f"[#conflict_log]Ê£ÄÊµãÂà∞ {len(conflict_map)} ‰∏™ÁîªÂ∏àÂÜ≤Á™Å:")
        for src_folder, target_folders in conflict_map.items():
            group, artist = extract_artist_info(src_folder)
            artist_info = f"Á§æÂõ¢: {group}, ÁîªÂ∏à: {artist}" if group else f"ÁîªÂ∏à: {artist}"
            logger.info(f"[#artist_info]{src_folder} ({artist_info}) ‰∏é‰ª•‰∏ãÊñá‰ª∂Â§πÂÜ≤Á™Å:")
            for target_folder in target_folders:
                logger.info(f"[#conflict_log] - {target_folder}")
    
    # Â¶ÇÊûúÊòØÈ¢ÑÊºîÊ®°ÂºèÔºåÊèêÂâçËøîÂõû
    if dry_run:
        logger.info(f"[#process_log]È¢ÑÊºîÊ®°ÂºèÔºö‰∏çÊâßË°åÂÆûÈôÖÁßªÂä®Êìç‰Ωú")
        return results
    
    # ÁîüÊàêÁ°ÆËÆ§È°µÈù¢Âπ∂Á≠âÂæÖÁî®Êà∑Á°ÆËÆ§
    html_file = generate_html_confirmation(source_dir, target_dir, source_folders, conflict_map)
    logger.info(f"[#process_log]Â∑≤ÁîüÊàêÁ°ÆËÆ§È°µÈù¢: {html_file}")
    
    if not wait_for_confirmation(html_file):
        logger.info(f"[#process_log]Áî®Êà∑ÂèñÊ∂à‰∫ÜÊìç‰ΩúÔºåÈÄÄÂá∫")
        return results
    
    # Â§ÑÁêÜÊâÄÊúâÊ∫êÊñá‰ª∂Â§π
    for i, folder in enumerate(source_folders):
        src_path = os.path.join(source_dir, folder)
        
        # Êõ¥Êñ∞ËøõÂ∫¶
        progress = ((i + 1) / len(source_folders)) * 100
        logger.info(f"[@current_progress]Â§ÑÁêÜ‰∏≠ ({i + 1}/{len(source_folders)}) {progress:.1f}%")
        
        # Â¶ÇÊûúÊòØÂÜ≤Á™ÅÊñá‰ª∂Â§πÔºåÂÖàÂ§ÑÁêÜÂÜ≤Á™Å
        if folder in conflict_map:
            for conflict_folder in conflict_map[folder]:
                conflict_path = os.path.join(target_dir, conflict_folder)
                conflict_wait_path = os.path.join(wait_folder, conflict_folder)
                
                # Â¶ÇÊûúwaitÁõÆÂΩï‰∏ãÂ∑≤Â≠òÂú®ÂêåÂêçÊñá‰ª∂Â§πÔºåÂÖàÊ∑ªÂä†Êó∂Èó¥Êà≥
                if os.path.exists(conflict_wait_path):
                    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                    conflict_wait_path = os.path.join(wait_folder, f"{timestamp}_{conflict_folder}")
                    logger.info(f"[#conflict_log]ÂæÖÂ§ÑÁêÜÂå∫Â∑≤Â≠òÂú®ÂêåÂêçÊñá‰ª∂Â§πÔºåÊ∑ªÂä†Êó∂Èó¥Êà≥: {timestamp}_{conflict_folder}")
                
                logger.info(f"[#conflict_log]ÁßªÂä®ÂÜ≤Á™ÅÊñá‰ª∂Â§πÂà∞ÂæÖÂ§ÑÁêÜÂå∫: {conflict_folder}")
                
                if move_folder(conflict_path, conflict_wait_path):
                    results["moved_conflicts"] += 1
                    logger.info(f"[#process_log]Â∑≤ÁßªÂä®ÂÜ≤Á™ÅÊñá‰ª∂Â§π: {conflict_folder} -> [02wait]/{os.path.basename(conflict_wait_path)}")
                else:
                    results["errors"] += 1
                    logger.info(f"[#process_log]ÁßªÂä®ÂÜ≤Á™ÅÊñá‰ª∂Â§πÂ§±Ë¥•: {conflict_folder}")
        
        # ÁßªÂä®Ê∫êÊñá‰ª∂Â§πÂà∞ÁõÆÊ†áÁõÆÂΩï
        dst_path = os.path.join(target_dir, folder)
        logger.info(f"[#process_log]ÁßªÂä®Êñá‰ª∂Â§π: {folder}")
        
        if move_folder(src_path, dst_path):
            results["moved_folders"] += 1
            
            # ËæìÂá∫ÁîªÂ∏à‰ø°ÊÅØ
            group, artist = extract_artist_info(folder)
            artist_info = f"Á§æÂõ¢: {group}, ÁîªÂ∏à: {artist}" if group else f"ÁîªÂ∏à: {artist}"
            logger.info(f"[#artist_info]Â∑≤ÁßªÂä®ÁîªÂ∏à: {folder} ({artist_info})")
        else:
            results["errors"] += 1
            logger.info(f"[#process_log]ÁßªÂä®Êñá‰ª∂Â§πÂ§±Ë¥•: {folder}")
    
    # ÊòæÁ§∫Ê±áÊÄª‰ø°ÊÅØ
    logger.info(f"[@current_progress]‚úÖ ÂÆåÊàê ({len(source_folders)}/{len(source_folders)}) 100%")
    logger.info(f"[#current_stats]ÊÄªËÆ°Â§ÑÁêÜ: {results['total_folders']} ‰∏™ÁîªÂ∏àÊñá‰ª∂Â§π")
    logger.info(f"[#current_stats]ÊàêÂäüÁßªÂä®: {results['moved_folders']} ‰∏™Êñá‰ª∂Â§π")
    logger.info(f"[#current_stats]Â§ÑÁêÜÂÜ≤Á™Å: {results['moved_conflicts']} ‰∏™Êñá‰ª∂Â§π")
    logger.info(f"[#current_stats]ÈîôËØØÊï∞Èáè: {results['errors']} ‰∏™")
    
    return results

def get_paths_from_clipboard() -> List[str]:
    """‰ªéÂâ™Ë¥¥ÊùøËØªÂèñÂ§öË°åË∑ØÂæÑ"""
    try:
        clipboard_content = pyperclip.paste()
        if not clipboard_content:
            return []
        
        paths = [
            path.strip().strip('"').strip("'")
            for path in clipboard_content.splitlines() 
            if path.strip()
        ]
        
        valid_paths = [
            path for path in paths 
            if os.path.exists(path)
        ]
        
        if valid_paths:
            logger.info(f"[#process_log]‰ªéÂâ™Ë¥¥ÊùøËØªÂèñÂà∞ {len(valid_paths)} ‰∏™ÊúâÊïàË∑ØÂæÑ")
        else:
            logger.info(f"[#process_log]Ââ™Ë¥¥Êùø‰∏≠Ê≤°ÊúâÊúâÊïàË∑ØÂæÑ")
            
        return valid_paths
        
    except Exception as e:
        logger.info(f"[#process_log]ËØªÂèñÂâ™Ë¥¥ÊùøÊó∂Âá∫Èîô: {e}")
        return []

def run_command_line():
    """ÂëΩ‰ª§Ë°åÊ®°ÂºèÊâßË°å"""
    parser = argparse.ArgumentParser(description='ÁßªÂä®ÁîªÂ∏àÊñá‰ª∂Â§πÂ∑•ÂÖ∑')
    parser.add_argument('-c', '--clipboard', action='store_true', help='‰ªéÂâ™Ë¥¥ÊùøËØªÂèñË∑ØÂæÑ')
    parser.add_argument('--source', help='Ê∫êÁõÆÂΩïË∑ØÂæÑ')
    parser.add_argument('--target', help='ÁõÆÊ†áÁõÆÂΩïË∑ØÂæÑ')
    parser.add_argument('--dry-run', action='store_true', help='È¢ÑÊºîÊ®°ÂºèÔºå‰∏çÂÆûÈôÖÁßªÂä®Êñá‰ª∂')
    args = parser.parse_args()
    
    # Ëé∑ÂèñÁõÆÂΩïÂØπ
    directory_pairs = []
    
    if args.clipboard:
        paths = get_paths_from_clipboard()
        if len(paths) >= 2 and len(paths) % 2 == 0:
            for i in range(0, len(paths), 2):
                directory_pairs.append((paths[i], paths[i+1]))
        else:
            logger.info(f"[#process_log]Ââ™Ë¥¥ÊùøË∑ØÂæÑÊï∞Èáè‰∏çÊ≠£Á°ÆÊàñ‰∏çÂùáÂåÄ")
    
    if args.source and args.target:
        directory_pairs.append((args.source, args.target))
    
    # Â¶ÇÊûúÊ≤°ÊúâÊúâÊïàÁöÑÁõÆÂΩïÂØπÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº
    if not directory_pairs:
        directory_pairs = [
            ("E:\\1Hub\\EH\\999EHV", "E:\\1Hub\\EH\\1EHV"),
        ]
    
    # Â§ÑÁêÜÊâÄÊúâÁõÆÂΩïÂØπ
    for source_dir, target_dir in directory_pairs:
        logger.info(f"[#current_stats]Â§ÑÁêÜÁõÆÂΩïÂØπ: {source_dir} -> {target_dir}")
        process_directory_pair(source_dir, target_dir, dry_run=args.dry_run)

def main_tui():
    """TUIÁïåÈù¢Ê®°ÂºèÂÖ•Âè£"""
    # ÂÆö‰πâÂ§çÈÄâÊ°ÜÈÄâÈ°π
    checkbox_options = [
        ("‰ªéÂâ™Ë¥¥ÊùøËØªÂèñË∑ØÂæÑ", "clipboard", "-c"),
        ("È¢ÑÊºîÊ®°Âºè", "dry_run", "--dry-run"),
    ]

    # ÂÆö‰πâËæìÂÖ•Ê°ÜÈÄâÈ°π
    input_options = [
        ("Ê∫êÁõÆÂΩï", "source", "--source", "E:\\1Hub\\EH\\999EHV", "ËæìÂÖ•Ê∫êÁõÆÂΩïË∑ØÂæÑ"),
        ("ÁõÆÊ†áÁõÆÂΩï", "target", "--target", "E:\\1Hub\\EH\\1EHV", "ËæìÂÖ•ÁõÆÊ†áÁõÆÂΩïË∑ØÂæÑ"),
    ]

    # È¢ÑËÆæÈÖçÁΩÆ
    preset_configs = {
        "Ê†áÂáÜÊ®°Âºè": {
            "description": "Â∞ÜE:\\1Hub\\EH\\999EHV‰∏ãÁöÑÁîªÂ∏àÊñá‰ª∂Â§πÁßªÂä®Âà∞E:\\1Hub\\EH\\1EHV",
            "checkbox_options": [],
            "input_values": {"source": "E:\\1Hub\\EH\\999EHV", "target": "E:\\1Hub\\EH\\1EHV"}
        },
        "È¢ÑÊºîÊ®°Âºè": {
            "description": "È¢ÑËßàÂ∞ÜË¶ÅÊâßË°åÁöÑÊìç‰ΩúÔºå‰∏çÂÆûÈôÖÁßªÂä®Êñá‰ª∂",
            "checkbox_options": ["dry_run"],
            "input_values": {"source": "E:\\1Hub\\EH\\999EHV", "target": "E:\\1Hub\\EH\\1EHV"}
        },
        "Ââ™Ë¥¥ÊùøÊ®°Âºè": {
            "description": "‰ªéÂâ™Ë¥¥ÊùøËØªÂèñÁõÆÂΩïÂØπ(ÊØè‰∏§Ë°å‰∏ÄÂØπ)",
            "checkbox_options": ["clipboard"],
            "input_values": {"source": "", "target": ""}
        }
    }

    # ÂÆö‰πâÂõûË∞ÉÂáΩÊï∞
    def on_run(params: dict):
        """TUIÈÖçÁΩÆÁïåÈù¢ÁöÑÂõûË∞ÉÂáΩÊï∞"""
        # ‰ªéÂèÇÊï∞‰∏≠ÊèêÂèñÂÄº
        use_clipboard = params['options'].get('clipboard', False)
        dry_run = params['options'].get('dry_run', False)
        source_dir = params['inputs'].get('source', '')
        target_dir = params['inputs'].get('target', '')
        
        directory_pairs = []
        
        # Â§ÑÁêÜÂâ™Ë¥¥ÊùøËæìÂÖ•
        if use_clipboard:
            paths = get_paths_from_clipboard()
            if len(paths) >= 2 and len(paths) % 2 == 0:
                for i in range(0, len(paths), 2):
                    directory_pairs.append((paths[i], paths[i+1]))
            else:
                logger.info(f"[#process_log]Ââ™Ë¥¥ÊùøË∑ØÂæÑÊï∞Èáè‰∏çÊ≠£Á°ÆÔºåÈúÄË¶ÅÂÅ∂Êï∞‰∏™Ë∑ØÂæÑ")
        
        # Â§ÑÁêÜÊâãÂä®ËæìÂÖ•
        if source_dir and target_dir:
            directory_pairs.append((source_dir, target_dir))
        
        # Â¶ÇÊûúÊ≤°ÊúâÊúâÊïàÁöÑÁõÆÂΩïÂØπÔºå‰ΩøÁî®ÈªòËÆ§ÂÄº
        if not directory_pairs:
            directory_pairs = [
                ("E:\\1Hub\\EH\\999EHV", "E:\\1Hub\\EH\\1EHV"),
            ]
        init_TextualLogger()
        # Â§ÑÁêÜÊâÄÊúâÁõÆÂΩïÂØπ
        for source, target in directory_pairs:
            logger.info(f"[#current_stats]Â§ÑÁêÜÁõÆÂΩïÂØπ: {source} -> {target}")
            process_directory_pair(source, target, dry_run=dry_run)

    # ÂàõÂª∫Âπ∂ËøêË°åÈÖçÁΩÆÁïåÈù¢
    app = create_config_app(
        program=__file__,
        title="ÁîªÂ∏àÊñá‰ª∂Â§πÁßªÂä®Â∑•ÂÖ∑",
        checkbox_options=checkbox_options,
        input_options=input_options,
        preset_configs=preset_configs,
        on_run=on_run
    )
    app.run()

def main():
    """‰∏ªÂáΩÊï∞ÂÖ•Âè£"""
    # Â¶ÇÊûúÊ≤°ÊúâÂëΩ‰ª§Ë°åÂèÇÊï∞ÔºåÂêØÂä®TUIÁïåÈù¢
    if len(sys.argv) == 1:
        main_tui()
    else:
        # Âê¶Âàô‰ΩøÁî®ÂëΩ‰ª§Ë°åÊ®°Âºè
        run_command_line()

if __name__ == "__main__":
    main()
